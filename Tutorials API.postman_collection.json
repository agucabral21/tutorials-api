{
	"info": {
		"_postman_id": "98b65d5d-a62d-4a91-a8eb-74a8fad81987",
		"name": "Tutorials API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14617444"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response was ok\", () => {",
									"    //parse the response json and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"token\", responseJson.data.token);",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"agucabral@gmail.com\",\n    \"password\":\"myDifficultPa55w0rD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/api/v1/auth",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response was ok\", () => {",
									"    //parse the response json and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"token\", responseJson.data.token);",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"mgscott@gmail.com\",\n    \"password\":\"michaelscorn\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/api/v1/auth",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tutorials",
			"item": [
				{
					"name": "token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response was ok\", () => {",
									"    //parse the response json and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"tutorial_token\", responseJson.data.token);",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/api/v1/tutorials/token",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"tutorials",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tutorial_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"Node tutorial example \",\n    \"videoURL\":\"www.google.com\",\n    \"description\":\"Node Video 123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/api/v1/tutorials",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"tutorials"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \n    \"description\":\"Node Video for  asdfafdsTesting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/api/v1/tutorials/:id",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"tutorials",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getAll",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response was ok\", () => {",
									"    //parse the response json and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"tutorial_token\", responseJson.data.token);",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/api/v1/tutorials?sort=desc",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"tutorials"
							],
							"query": [
								{
									"key": "title",
									"value": "chocolate",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "description",
									"value": "c V",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getById",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response was ok\", () => {",
									"    //parse the response json and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"tutorial_token\", responseJson.data.token);",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/api/v1/tutorials/:id",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"tutorials",
								":id"
							],
							"query": [
								{
									"key": "title",
									"value": "java",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "description",
									"value": "scri",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteById",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response was ok\", () => {",
									"    //parse the response json and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"tutorial_token\", responseJson.data.token);",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/api/v1/tutorials/:id",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"tutorials",
								":id"
							],
							"query": [
								{
									"key": "title",
									"value": "java",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "description",
									"value": "scri",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "asdf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "massDelete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response was ok\", () => {",
									"    //parse the response json and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"tutorial_token\", responseJson.data.token);",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/api/v1/tutorials/mass_delete",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"tutorials",
								"mass_delete"
							],
							"query": [
								{
									"key": "title",
									"value": "java",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "description",
									"value": "scri",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Extra",
			"item": [
				{
					"name": "dbPrepare",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/api/v1/prep",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"prep"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server}}/api/v1/status",
							"host": [
								"{{server}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}